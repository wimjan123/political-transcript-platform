version: '3.8'

services:
  db:
    image: postgres:15
    container_name: political_transcripts_db
    environment:
      POSTGRES_DB: ${POSTGRES_DB:-political_transcripts}
      POSTGRES_USER: ${POSTGRES_USER:-postgres}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:-postgres}
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./backend/migrations/init.sql:/docker-entrypoint-initdb.d/init.sql
    ports:
      - "5433:5432"
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER:-postgres}"]
      interval: 30s
      timeout: 10s
      retries: 5

  api:
    build:
      context: ./backend
      dockerfile: Dockerfile
    container_name: political_transcripts_api
    environment:
      DATABASE_URL: postgresql://${POSTGRES_USER:-postgres}:${POSTGRES_PASSWORD:-postgres}@db:5432/${POSTGRES_DB:-political_transcripts}
      ELASTICSEARCH_URL: ${ELASTICSEARCH_URL:-http://elasticsearch:9200}
      ELASTICSEARCH_INDEX: ${ELASTICSEARCH_INDEX:-transcript_segments}
      API_HOST: ${API_HOST:-0.0.0.0}
      API_PORT: ${API_PORT:-8000}
      BACKEND_CORS_ORIGINS: ${BACKEND_CORS_ORIGINS:-["http://localhost:3000"]}
      HTML_DATA_DIR: ${HTML_DATA_DIR:-/data/html}
      DEBUG: ${DEBUG:-true}
      LOG_LEVEL: ${LOG_LEVEL:-INFO}
      MEILI_HOST: ${MEILI_HOST:-http://meilisearch:7700}
      MEILI_MASTER_KEY: ${MEILI_MASTER_KEY:-}
    volumes:
      - ./backend:/app
      - ./data:/data
      - /root/polibase/out/html:/data/html:ro
    ports:
      - "8000:8000"
    depends_on:
      db:
        condition: service_healthy
      elasticsearch:
        condition: service_healthy
    command: uvicorn src.main:app --host 0.0.0.0 --port 8000 --reload
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 30s
      timeout: 10s
      retries: 5

  web:
    build:
      context: ./frontend
      dockerfile: Dockerfile
    container_name: political_transcripts_web
    environment:
      # Use relative URLs in dev; CRA proxy will route to the API container
      REACT_APP_API_URL: ${REACT_APP_API_URL:-}
      REACT_APP_TITLE: ${REACT_APP_TITLE:-Political Transcript Search}
    volumes:
      - ./frontend:/app
      - /app/node_modules
    ports:
      - "3000:3000"
    depends_on:
      - api
    command: npm start
    stdin_open: true
    tty: true

  elasticsearch:
    image: elasticsearch:8.11.0
    container_name: political_transcripts_elasticsearch
    environment:
      - discovery.type=single-node
      - xpack.security.enabled=false
      - xpack.security.enrollment.enabled=false
      - "ES_JAVA_OPTS=-Xms1g -Xmx1g"
      - cluster.name=political-transcripts
      - node.name=es-node-1
    volumes:
      - es_data:/usr/share/elasticsearch/data
    ports:
      - "9200:9200"
      - "9300:9300"
    healthcheck:
      test: ["CMD-SHELL", "curl -f http://localhost:9200/_cluster/health || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 5
    mem_limit: 2g
    ulimits:
      memlock:
        soft: -1
        hard: -1

  kibana:
    image: kibana:8.11.0
    container_name: political_transcripts_kibana
    environment:
      ELASTICSEARCH_HOSTS: http://elasticsearch:9200
      XPACK_SECURITY_ENABLED: false
    ports:
      - "5601:5601"
    depends_on:
      elasticsearch:
        condition: service_healthy
    healthcheck:
      test: ["CMD-SHELL", "curl -f http://localhost:5601/api/status || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 5

  meilisearch:
    image: getmeili/meilisearch:v1.9
    container_name: political_transcripts_meilisearch
    environment:
      MEILI_ENV: production
      MEILI_MASTER_KEY: ${MEILI_MASTER_KEY:-change-me}
    volumes:
      - ./meili_data:/meili_data
    ports:
      - "7700:7700"
    healthcheck:
      test: ["CMD-SHELL", "curl -f http://localhost:7700/health || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 5

volumes:
  postgres_data:
  es_data:
  meili_data:
